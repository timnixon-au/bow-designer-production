{"version":3,"sources":["components/AppHeader.js","pages/Home.js","components/DesignGallery.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","AppBar","position","Typography","variant","color","align","useStyles","makeStyles","table","minWidth","createData","name","calories","fat","carbs","protein","rows","BasicTable","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","key","scope","withStyles","theme","main","padding","spacing","breakpoints","down","CssBaseline","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAiBeA,EAVG,kBACd,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,iCACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAAUC,MAAM,UAA/C,mBCLG,oBACX,kBAACH,EAAA,EAAD,CAAYC,QAAQ,MAApB,kB,gECIEG,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAId,SAASC,EAAWC,EAAMC,EAAUC,EAAKC,EAAOC,GAC9C,MAAO,CAAEJ,OAAMC,WAAUC,MAAKC,QAAOC,WAGvC,IAAMC,EAAO,CACXN,EAAW,iBAAkB,IAAK,EAAK,GAAI,GAC3CA,EAAW,qBAAsB,IAAK,EAAK,GAAI,KAC/CA,EAAW,SAAU,IAAK,GAAM,GAAI,GACpCA,EAAW,UAAW,IAAK,IAAK,GAAI,KACpCA,EAAW,cAAe,IAAK,GAAM,GAAI,MAG5B,SAASO,IACtB,IAAMC,EAAUZ,IAEhB,OACE,kBAACa,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CAAOC,UAAWL,EAAQV,MAAOgB,aAAW,gBAC1C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,+BACA,kBAACA,EAAA,EAAD,CAAWtB,MAAM,SAAjB,YACA,kBAACsB,EAAA,EAAD,CAAWtB,MAAM,SAAjB,cACA,kBAACsB,EAAA,EAAD,CAAWtB,MAAM,SAAjB,gBACA,kBAACsB,EAAA,EAAD,CAAWtB,MAAM,SAAjB,oBAGJ,kBAACuB,EAAA,EAAD,KACGZ,EAAKa,KAAI,SAACC,GAAD,OACR,kBAACJ,EAAA,EAAD,CAAUK,IAAKD,EAAInB,MACjB,kBAACgB,EAAA,EAAD,CAAWP,UAAU,KAAKY,MAAM,OAC7BF,EAAInB,MAEP,kBAACgB,EAAA,EAAD,CAAWtB,MAAM,SAASyB,EAAIlB,UAC9B,kBAACe,EAAA,EAAD,CAAWtB,MAAM,SAASyB,EAAIjB,KAC9B,kBAACc,EAAA,EAAD,CAAWtB,MAAM,SAASyB,EAAIhB,OAC9B,kBAACa,EAAA,EAAD,CAAWtB,MAAM,SAASyB,EAAIf,gBC1C5C,IAoBekB,eApBA,SAAAC,GAAK,MAAK,CACvBC,KAAK,aACHC,QAASF,EAAMG,QAAQ,IACtBH,EAAMI,YAAYC,KAAK,MAAQ,CAC9BH,QAASF,EAAMG,QAAQ,QAgBdJ,EAXH,SAAC,GAAD,IAAGf,EAAH,EAAGA,QAAH,OACV,kBAAC,WAAD,KACE,kBAACsB,EAAA,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,0BAAMjB,UAAWL,EAAQiB,MACvB,kBAACM,EAAD,WCbcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cc857abc.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\n\r\nconst AppHeader = () => (\r\n    <AppBar position=\"static\">\r\n        <toolbar>\r\n            <Typography variant=\"h6\" color=\"inherit\" align=\"center\">\r\n                Bow Designer\r\n            </Typography>\r\n        </toolbar>\r\n    </AppBar>\r\n);\r\n\r\nexport default AppHeader;","import React from 'react';\r\nimport {\r\n    Typography,\r\n} from '@material-ui/core';\r\n\r\nexport default () => (\r\n    <Typography variant=\"h4\">Welcome home!</Typography>\r\n);","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\nexport default function BasicTable() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Dessert (100g serving)</TableCell>\r\n            <TableCell align=\"right\">Calories</TableCell>\r\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\r\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\r\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.calories}</TableCell>\r\n              <TableCell align=\"right\">{row.fat}</TableCell>\r\n              <TableCell align=\"right\">{row.carbs}</TableCell>\r\n              <TableCell align=\"right\">{row.protein}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React, { Fragment } from 'react';\nimport {\n  CssBaseline,\n  withStyles,\n} from '@material-ui/core';\n\nimport AppHeader from './components/AppHeader';\nimport Home from './pages/Home'\nimport DesignGallery from './components/DesignGallery'\n\nconst styles = theme => ({\n  main: {\n    padding: theme.spacing(3),\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(2),\n    },\n  },\n});\n\nconst App = ({ classes }) => (\n  <Fragment>\n    <CssBaseline />\n    <AppHeader />\n    <DesignGallery />\n    <main className={classes.main}>\n      <Home />\n    </main>\n  </Fragment>\n)\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// const element = <h1>Hello, world</h1>;\n// ReactDOM.render(element, document.getElementById('root'));\n// function Welcome(props) {\n//   return <h1>Hello, {props.name}</h1>;\n// }\n\n// // class Welcome extends React.Component {\n// //   render() {\n// //     return <h1>Hello, {this.props.name}</h1>;\n// //   }\n// // }\n\n// function tick() {\n//   const element = (\n//     <div>\n//       <h1>Hello, world!</h1>\n//       <h2>It is {new Date().toLocaleTimeString()}.</h2>\n//       <div>\n//       {Welcome({name:\"Tom\"})}\n//       </div>\n//     </div>\n\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n\n// setInterval(tick, 1000);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nif (module.hot) module.hot.accept();"],"sourceRoot":""}